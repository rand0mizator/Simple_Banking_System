type: edu
files:
- name: banking/banking.py
  visible: true
  text: "import random\nfrom string import digits\n\naccounts = []  # all account\
    \ in object type\ncurrent_account = None  # when logged its related to object\
    \ from accounts\nexit_flag = False   \n\n\nclass Account:\n    def __init__(self):\n\
    \        self.card_number = '400000' + ''.join(random.choice(digits) for x in\
    \ range(10))  # construct card number in form of\n                           \
    \                                                              # 400000DDDDDDDDDD\n\
    \        self.pin = ''.join(random.choice(digits) for x in range(4))  # construct\
    \ pin in form of DDDD\n        self.balance = 0\n\n\ndef create_account():\n \
    \   \"\"\"creates objects of Account class, adds to 'Database' and prints card\
    \ number and pin\"\"\"\n    global accounts  # to allow changing global variable\
    \ inside function\n    account = Account()  # create object of Account class\n\
    \    accounts.append(account)  # add object of Account class to \"Database\"\n\
    \    print(\"Your card has been created\")\n    print(\"Your card number:\")\n\
    \    print(account.card_number)\n    print(\"Your card PIN:\")\n    print(account.pin)\n\
    \n\ndef access_account(card_number, pin):\n    \"\"\"grants access to account\
    \ via card number and pin, changes global variable 'current_account' \"\"\"\n\
    \    global current_account\n    for account in accounts:\n        if account.card_number\
    \ == card_number and account.pin == pin:\n            current_account = account\n\
    \            return print(\"You have successfully logged in!\")\n            \n\
    \    else:\n        print(\"Wrong card number or PIN!\")\n\ndef logout():\n  \
    \  \"\"\"changes global variable 'current_account' \"\"\"\n    global current_account\n\
    \    current_account = None\n    print(\"You have successfully logged out!\")\n\
    \n\ndef check_balance():\n    \"\"\"if successfully logged into account (aka current_account\
    \ != None) prints out its balance\"\"\"\n    print(f\"Balance: {current_account.balance}\"\
    )\n    \n\n\nwhile True:\n    if exit_flag:\n        print(\"Bye!\")\n       \
    \ break\n        \n    print(\"\"\"\n        1. Create an account\n        2.\
    \ Log into account\n        0. Exit\n          \"\"\")\n    input_ = input()\n\
    \    \n    if input_ == '1':\n        create_account()\n\n    elif input_ == '2':\n\
    \        cn = input(\"card number\")\n        p = input(\"pin\")\n        access_account(cn,\
    \ p)\n               \n    elif input_ == '3':\n        print_accounts_info()\n\
    \n    elif input_ == '0':\n        exit_flag = True\n\n    while current_account:\
    \  # if successfully logged in (current_account != None) \n        print(\"\"\"\
    \n        1. Balance\n        2. Log out\n        0. Exit\n          \"\"\")\n\
    \        input_ = input()\n        if input_ == '1':\n            check_balance()\n\
    \        elif input_ == '2':\n            logout()\n        elif input_ == '0':\n\
    \            exit_flag = True\n            break\n            \n            \n\
    \        "
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest, WrongAnswer
    from hstest.test_case import TestCase
    from shutil import copy2
    import sqlite3
    import random
    import re
    import os

    card_number = ''
    pin = ''
    second_card_number = ''
    second_pin = ''
    are_all_inputs_read = False
    db_file_name = 'card.s3db'
    temp_db_file_name = 'temp.s3db'


    def get_credentials(output: str, count=0):
        number = re.findall(r'^400000\d{10}$', output, re.MULTILINE)
        if not number:
            raise WrongAnswer('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswer('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')
        if count == 2:
            if len(number) == 1 or len(PIN) == 1:
                raise WrongAnswer(f'Expected 2 generated card credentials, but found {len(number)}')
            return (number[0], PIN[0]), (number[1], PIN[1])
        else:
            return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    def check_db(output: str, value_to_return):
        if not os.path.exists(db_file_name):
            return CheckResult.wrong('Can\'t find db file named \'{}\''.format(db_file_name))
        try:
            copy2(db_file_name, temp_db_file_name)
        except Exception:
            return CheckResult.wrong('Can\'t copy database file!')

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute(
                    'SELECT name FROM sqlite_master WHERE type = \'table\' AND name NOT LIKE \'sqlite_%\';')
                for _ in response.fetchall():
                    if 'card' in _:
                        break
                else:
                    return CheckResult.wrong('Your database doesn\'t have a table named \'card\'')
        except Exception as exp:
            return CheckResult.wrong('Can\'t connect to the database!')

        correct_columns = (('ID', 'INTEGER'), ('NUMBER', 'TEXT'), ('PIN', 'TEXT'), ('BALANCE', 'INTEGER'))

        try:
            with sqlite3.connect(db_file_name) as db:
                response = db.execute('PRAGMA table_info(card);')
                real_columns = response.fetchall()
                for correct_column in correct_columns:
                    for real_column in real_columns:
                        real_column = [str(element).upper() for element in real_column]
                        if correct_column[0] in real_column and correct_column[1] in real_column:
                            break
                    else:
                        return CheckResult.wrong(
                            f'Can\'t find column named \'{correct_column[0].lower()}\' with \'{correct_column[1]}\' type.\n'
                            'Your table should have columns described in the stage instructions.')
        except Exception:
            return CheckResult.wrong('Can\'t connect to the database!')

        return CheckResult.correct()


    def check_db_rows(output: str, value_to_return):
        correct_num_of_cards = 10
        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card').fetchall()
            for number in numbers:
                if len(number) != 16:
                    return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
                is_found = False
                for row in rows:
                    if number in row:
                        is_found = True
                if not is_found:
                    return CheckResult.wrong('Your database doesn’t save newly created cards.\n'
                                             'Make sure you commit your DB changes right after saving a new card in the database!')
        return CheckResult.correct()


    def test_add_income(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return '2\n{}\n{}\n2\n10000'.format(card_number, pin)


    def test_second_add_income(output: str, value_to_return):
        global card_number
        expected_balance = 10000
        with sqlite3.connect(db_file_name) as db:
            result = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not result:
                return CheckResult.wrong(f'Can\' find card number \'{card_number}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            balance = result[3]
            if balance != expected_balance:
                return CheckResult.wrong(
                    'Account balance is wrong after adding income. Expected {}'.format(expected_balance))
        return '2\n15000'


    def test_balance_after_second_income(output: str, value_to_return):
        global card_number, are_all_inputs_read
        expected_balance = 25000
        with sqlite3.connect(db_file_name) as db:
            result = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not result:
                return CheckResult.wrong(f'Can\' find card number \'{card_number}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            balance = result[3]
            if balance != expected_balance:
                return CheckResult.wrong(
                    'Account balance is wrong after adding income. Expected {}'.format(expected_balance))
        are_all_inputs_read = True
        return value_to_return


    def test_transfer(output: str, value_to_return):
        global card_number, pin, second_card_number, second_pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output, count=2)
        card_number, pin = credentials[0]
        second_card_number, second_pin = credentials[1]
        doesnt_pass_luhn = 4000003972196502
        return '2\n{}\n{}\n3\n{}'.format(card_number, pin, doesnt_pass_luhn)


    def test_transfer_doesnt_pass_luhn(output: str, value_to_return):
        if 'mistake'.lower() not in output.lower():
            return CheckResult.wrong('You should not allow to transfer to a card number that doesn\'t pass '
                                     'the Luhn algorithm.\n Instead output \'{}\''.format(
                'Probably you made mistake in card number. Please try again!'))
        doesnt_exist_card = 3000003972196503
        return '3\n{}'.format(doesnt_exist_card)


    def test_transfer_doesnt_exist_card(output: str, value_to_return):
        global second_card_number
        if 'not exist' not in output.lower():
            return CheckResult.wrong('You should not allow to transfer to a card number that does not exist.'
                                     '\nYpu should print \'{}\''.format('Such a card does not exist.'))
        return '3\n{}\n10000'.format(second_card_number)


    def test_transfer_not_enough_money(output: str, value_to_return):
        global second_card_number
        if 'not enough money' not in output.lower():
            return CheckResult.wrong('You should not allow a transfer if there is not enough money '
                                     'in the account to complete it.\n')
        return '2\n20000\n3\n{}\n10000'.format(second_card_number)


    def test_balance_after_transfer(output: str, value_to_return):
        global card_number, second_card_number, are_all_inputs_read
        with sqlite3.connect(db_file_name) as db:
            first = db.execute('SELECT * FROM card WHERE number = {}'.format(card_number)).fetchone()
            if not first:
                return CheckResult.wrong(f'Can\' find card number \'{first}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            second = db.execute('SELECT * FROM card WHERE number = {}'.format(second_card_number)).fetchone()
            if not second:
                return CheckResult.wrong(f'Can\' find card number \'{second}\' in the database!\n'
                                         f'Make sure you commit your DB changes right after saving a new card in the database!')
            first_balance = first[3]
            second_balance = second[3]
            if first_balance != 10000:
                return CheckResult.wrong('Incorrect account balance of the card used to make the transfer.')
            if second_balance != 10000:
                return CheckResult.wrong('Incorrect account balance of the card to which the transfer was made.')
        are_all_inputs_read = True
        return '0'


    def test_closing_account(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number, pin = credentials[0], credentials[1]
        return '2\n{}\n{}\n4'.format(card_number, pin)


    def test_rows_after_closing_account(output: str, value_to_return):
        global card_number, are_all_inputs_read
        with sqlite3.connect(db_file_name) as db:
            rows = db.execute('SELECT * FROM card WHERE number = \'{}\''.format(card_number)).fetchall()
            if rows:
                return CheckResult.wrong('After closing an account, the card number should be deleted from the database.')
        are_all_inputs_read = True
        return value_to_return


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin='0',
                    check_function=check_db,
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 8),
                    ]),
                TestCase(
                    stdin='1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0',
                    check_function=check_db_rows
                ),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_add_income(output, None),
                        lambda output: test_second_add_income(output, None),
                        lambda output: test_balance_after_second_income(output, '0'),
                    ]),
                TestCase(
                    stdin=[
                        '1\n1',
                        lambda output: test_transfer(output, None),
                        lambda output: test_transfer_doesnt_pass_luhn(output, None),
                        lambda output: test_transfer_doesnt_exist_card(output, None),
                        lambda output: test_transfer_not_enough_money(output, None),
                        lambda output: test_balance_after_transfer(output, None),
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_closing_account(output, None),
                        lambda output: test_rows_after_closing_account(output, '0')
                    ]
                )
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')

        def after_all_tests(self):
            if os.path.exists('temp.s3db'):
                copy2('temp.s3db', 'card.s3db')
                os.remove('temp.s3db')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
- name: banking/bankrr.py
  visible: true
  text: "import random\nimport sqlite3\n\n\nclass CreditCard:\n    IIN = \"400000\"\
    \n\n    def __init__(self):\n        self.checksum = 0\n        self.card_number\
    \ = None\n        self.card_pin = None\n        self.balance = 0\n\n    @staticmethod\n\
    \    def create_table():\n        conn = sqlite3.connect(\"card.s3db\")\n    \
    \    cur = conn.cursor()\n        cur.execute(\"\"\"CREATE TABLE IF NOT EXISTS\
    \ card(\n                    id INTEGER PRIMARY KEY, \n                    'number'\
    \ TEXT,\n                    pin TEXT,\n                    balance INTEGER DEFAULT(0))\"\
    \"\")\n        conn.commit()\n        conn.close()\n\n    @staticmethod\n    def\
    \ add_account_to_db(card_nr, pin):\n        conn = sqlite3.connect(\"card.s3db\"\
    )\n        cur = conn.cursor()\n        cur.execute(\"\"\"INSERT INTO card \n\
    \                            ('number', 'pin') VALUES (?, ?)\n               \
    \             \"\"\", (card_nr, pin))\n        conn.commit()\n        conn.close()\n\
    \n    def generate_card_number(self):\n        self.card_number = list(CreditCard.IIN)\
    \ + [str(random.randint(0, 9)) for _ in range(9)]\n        int_card_number = list(map(int,\
    \ self.card_number))\n        for digit in range(len(int_card_number)):\n    \
    \        if digit % 2 == 0:\n                int_card_number[digit] *= 2\n   \
    \             if int_card_number[digit] > 9:\n                    int_card_number[digit]\
    \ -= 9\n        total_digits = sum(int_card_number)\n        while total_digits\
    \ % 10 != 0:\n            total_digits += 1\n            self.checksum += 1\n\
    \        self.card_number.append(str(self.checksum))\n        self.card_number\
    \ = \"\".join(self.card_number)\n\n    def create_account(self):\n        self.generate_card_number()\n\
    \        self.card_number = f\"{self.card_number}\"\n        self.card_pin = \"\
    \".join([str(random.randint(0, 9)) for _ in range(4)])\n        print(\"Your card\
    \ has been created\")\n        print(f\"Your card number:\")\n        print(self.card_number)\n\
    \        print(f\"Your card PIN:\")\n        print(f\"{self.card_pin}\")\n   \
    \     self.add_account_to_db(self.card_number, self.card_pin)\n\n    @staticmethod\n\
    \    def verify_credentials(card_number, card_pin):\n        conn = sqlite3.connect(\"\
    card.s3db\")\n        cur = conn.cursor()\n        cur.execute(\"SELECT number,\
    \ pin FROM card\")\n        accounts = cur.fetchall()\n        conn.commit()\n\
    \        for acc_info in accounts:\n            if card_number in acc_info and\
    \ card_pin in acc_info:\n                conn.close()\n                return\
    \ True\n        conn.close()\n        return False\n\n    def log_into_account(self,\
    \ card_number, card_pin):\n        if self.verify_credentials(card_number, card_pin):\n\
    \            print(\"\\nYou have successfully logged in!\")\n            while\
    \ True:\n                print(\"\\n1. Balance\\n2. Log out\\n0. Exit\")\n   \
    \             logged_option = input(\">\")\n                if logged_option ==\
    \ \"1\":\n                    print(f\"\\nBalance: {self.balance}\")\n       \
    \         elif logged_option == \"2\":\n                    print(\"\\nYou have\
    \ successfully logged out!\")\n                    break\n                elif\
    \ logged_option == \"0\":\n                    print(\"\\nBye!\")\n          \
    \          exit()\n                else:\n                    print(\"\\nInvalid\
    \ option\")\n        else:\n            print(\"\\nwrong\")\n\n\nwhile True:\n\
    \    CreditCard.create_table()\n    card = CreditCard()\n    print(\"\\n1. Create\
    \ an account\\n2. Log into account\\n0. Exit\")\n    option = input(\">\")\n \
    \   if option == \"1\":\n        card.create_account()\n    elif option == \"\
    2\":\n        card_number_input = input(\"\\nEnter your card number:\\n\")\n \
    \       card_pin_input = input(\"Enter your PIN:\\n\")\n        card.log_into_account(card_number_input,\
    \ card_pin_input)\n    elif option == \"0\":\n        print(\"\\nBye!\")\n   \
    \     exit()\n    else:\n        print(\"\\nIncorrect option\")"
  learner_created: true
- name: banking/card.s3db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/109/stages/594/implement#comment
status: Unchecked
record: -1
